% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 14-Apr-2018 16:40:03

%% Uses ANN to obtain forecast flow and compares with WRF downscaled flow.
clear all;
close all
format short g
rng('default')
[status,sheets]=xlsfinfo('Predictors/ObservedInflow_US_BothStage_ANN.xlsx');

for bb = 1
bname = sheets{bb}
corr=zeros(7,1);
corrV=corr;
rmse=corr;
nrmse=corr;
nrmseV=corr;
rmseV=corr;
nse=corr;
nseV=corr;

sz=4010;

range= [1:3200];  % range for dates in the training data 
rangeV=[max(range)+1:sz];   % range for dates in the validation data 
trainInd = 1:2800;      % training indices 
valInd   = 2801:3100;   % validation indices 
testInd  = 3101:3200;   % testing indices 


for nn = 1:7
  
    dat=dlmread(['Predictors/' bname '/Predictor_GFS_L' num2str(nn) '.txt']);
    for i=1:size(dat,1)
        dayorg(i,1)=datenum(sprintf('%d', dat(i,1)),'yyyymmdd');
    end
    dprecL(:,nn)=dat(1:sz,2);
    dtmaxL(:,nn)=dat(1:sz,3);
    dtminL(:,nn)=dat(1:sz,4);
    dwspdL(:,nn)=dat(1:sz,5);
% 
end
datg=dlmread(['Predictors/CHIRPS_precip/Predictor_CHIRPS_' bname '.txt']);

datg = [20061229,0;
        20061230,0;
        20061231,0;
        datg];


dprecL=[datg(1:sz,2) datg(2:sz+1,2) datg(3:sz+2,2) dprecL];

datobs=xlsread('Predictors/ObservedInflow_US_BothStage_ANN.xlsx',bname);
datobs=max(0,datobs);

for nn=1:7
    QobsL(:,nn)=datobs(3+nn:3+sz-1+nn,2);   % USE col 1 for WINDOWS OS and col 2 for MAC
end

%% baseflow separation
rL =zeros(sz,7);
b =rL;
r =rL;
bo=rL;
by =zeros(7,size(range,2));
byV=zeros(7,size(rangeV,2));
ry=by;
ryV=byV;

a=0.08;
BFImax=0.58;
for nl=3:-1:1
    
    % Define hindcast flow, QhcL(:,1) = QobcL0,  Qhcl(:,7) = QobcL-7
    nn=4-nl;
    QhcL(:,nn)=datobs(nl:nl+sz-1,2);    % USE col 1 for WINDOWS OS and col 2 for MAC
    b(1,nn)= QhcL(1,nn);
    for k= 2:sz
        b(k,nn)=min(QhcL(k,nn),((1 - BFImax) * a * b(k-1,nn) + ( 1 - a ) * BFImax * QhcL(k,nn)) / ( 1 - a * BFImax) );
        r(k,nn)=QhcL(k,nn)-b(k,nn);
    end
end
m8QhcL=movmean(QhcL,[7,0],1);
m5QhcL=movmean(QhcL,[4,0],1);
m3QhcL=movmean(QhcL,[2,0],1);
netsFin = cell(1,7);
cn=0;


%% Loop for Calibration

hiddenLayerSize = 7;

    cn=cn+1;
    for nn=1:7
%         nn
        days = dayorg(range);
        daysV = dayorg(rangeV);
        obs(:,nn) = QobsL(range,nn);
        obsV(:,nn) = QobsL(rangeV,nn);
        if nn==1
            xQ = [QhcL(range,1) m3QhcL(range,1) m3QhcL(range,2)];
            xQV = [QhcL(rangeV,1) m3QhcL(rangeV,1) m3QhcL(rangeV,2)];
            bQ = [b(range,1) b(range,2) b(range,3)];
            bQV = [b(rangeV,1) b(rangeV,2) b(rangeV,3)];
            rQ = [r(range,1) r(range,2) r(range,3)];
            rQV = [r(rangeV,1) r(rangeV,2) r(rangeV,3)];
			
        elseif nn==2
            xQ =  [y(nn-1,:)'  m3QhcL(range,1) m3QhcL(range,2)];
            xQV = [yV(nn-1,:)' m3QhcL(rangeV,1) m3QhcL(rangeV,2)];
            bQ =  [by(nn-1,:)'  b(range,1) b(range,2) b(range,3)]; 
            bQV = [byV(nn-1,:)' b(rangeV,1) b(rangeV,2) b(rangeV,3)];
            rQ =  [ry(nn-1,:)'  r(range,1) r(range,2) r(range,3)];
            rQV = [ryV(nn-1,:)' r(rangeV,1) r(rangeV,2) r(rangeV,3)];

        elseif nn==3
            xQ = [y(nn-1,:)' y(nn-2,:)' m5QhcL(range,1)];
            xQV = [yV(nn-1,:)' yV(nn-2,:)' m5QhcL(rangeV,1) ];
            bQ =  [by(nn-1,:)'  by(nn-2,:)' b(range,1) b(range,2)];
            bQV = [byV(nn-1,:)' byV(nn-2,:)' b(rangeV,1)  b(rangeV,2)];
            rQ =  [ry(nn-1,:)'  ry(nn-2,:)' r(range,1) r(range,2)];
            rQV = [ryV(nn-1,:)' ryV(nn-2,:)' r(rangeV,1)  r(rangeV,2)]; 

        else
            xQ = [y(nn-1,:)' y(nn-2,:)' y(nn-3,:)'  m8QhcL(range,1)];
            xQV = [yV(nn-1,:)' yV(nn-2,:)' yV(nn-3,:)'   m8QhcL(rangeV,1) ];
            bQ =  [by(nn-1,:)'  by(nn-2,:)' by(nn-3,:)' ];
            bQV = [byV(nn-1,:)' byV(nn-2,:)' byV(nn-3,:)'];
            rQ =  [ry(nn-1,:)'  ry(nn-2,:)' ry(nn-3,:)' ];
            rQV = [ryV(nn-1,:)' ryV(nn-2,:)' ryV(nn-3,:)'];
    
        end
       x=[ dprecL(range,nn+3)     dprecL(range,nn+2)   dprecL(range,nn+1)...  
             dtmaxL(range,nn)    ...  
             dtminL(range,nn)  ... 
             xQ  bQ  ];
        xV=[  dprecL(rangeV,nn+3)    dprecL(rangeV,nn+2)   dprecL(rangeV,nn+1) ...  
            dtmaxL(rangeV,nn) ...  
            dtminL(rangeV,nn)  ...
            xQV bQV  ];       



        % Start NN 
        x = x';
        xV = xV';
        t = obs(:,nn)';
        tV = obsV(:,nn)';
        trainFcn = 'trainlm'; % Training function: Levenberg-Marquardt.
        % Create a Fitting Network
        
        net = feedforwardnet(hiddenLayerSize,trainFcn);
        net.performFcn='msereg';

    %     net.divideFcn = '';
        net.divideFcn = 'divideind';
        net.trainParam.epochs = 300;
        net.trainParam.goal = 1e-5;
        net.performParam.regularization = 0.5;

        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainInd = trainInd;
        net.divideParam.valInd   = valInd;
        net.divideParam.testInd  = testInd;        
		% Train the Network
        numNN=1;
        perfs = zeros(1, numNN);
        nets = cell(1, numNN);   
        for i = 1:numNN
          [nets{i} tr{i}]= train(net, x, t);
          neti = nets{i};
          yt(i,:) = neti(x);
          perfs(i) = mse(neti, t, yt);
          ytV(i,:) = neti(xV);
          %evaluate
            ct = corrcoef(t,yt(i,:));
            cx(i)=ct(1,2);
        end
        [idv,idx]=max(cx);
        
        y(nn,:) = yt(idx,:);
        yV(nn,:)= ytV(idx,:);
        netsFin{nn}  = nets{idx};
        trFin{nn} = tr{idx};
        
        trainTargets = t .* trFin{nn}.trainMask{1};
        valTargets   = t .* trFin{nn}.valMask{1};
         testTargets  = t .* trFin{nn}.testMask{1};

        y(nn,:)=max(0,y(nn,:));
        yV(nn,:)=max(0,yV(nn,:));    
        %calculate baseflow of modeled streamflow y, yV
        by(nn,1)=y(nn,1);
        byV(nn,1)=yV(nn,1);
        for k=2:size(y,2) 
            by(nn,k)=max(0,min(y(nn,k),((1 - BFImax) * a * by(nn,k-1) + ( 1 - a ) * BFImax * y(nn,k)) / ( 1 - a * BFImax) ));
            ry(nn,k)=y(nn,k)-by(nn,k);
        end
        for k=2:size(yV,2) 
            byV(nn,k)=max(0,min(yV(nn,k),((1 - BFImax) * a * byV(nn,k-1) + ( 1 - a ) * BFImax * yV(nn,k)) / ( 1 - a * BFImax) ));
            ryV(nn,k)=yV(nn,k)-byV(nn,k);
        end
        

        e = gsubtract(t,y(nn,:));
        rmse(nn,1) = (perform(net,t,y(nn,:)))^0.5;
        nrmse(nn,1) = (perform(net,t,y(nn,:)))^0.5/std(t);
        c = corrcoef(t,y(nn,:));
        corr(nn,1)=c(1,2);
        E = t- y(nn,:);
        SSE = sum(E.^2);
        u = mean(t);
        SSU = sum((t - u).^2);
        nse(nn,1) = 1 - SSE/SSU;
        spn = 150;
        spnr=560;
        % Test the Network
        e = gsubtract(tV,yV(nn,:));
        rmseV(nn,1) = (perform(net,tV(spn:end),yV(nn,spn:end)))^0.5;
        nrmseV(nn,1) = (perform(net,tV(spn:end),yV(nn,spn:end)))^0.5/std(tV(spn:end));
        nrmseVavg(nn,1) = (perform(net,tV(spn:end),yV(nn,spn:end)))^0.5/mean(tV(spn:end));
        maeV(nn,1) = mean(abs(tV(spn:end)-yV(nn,spn:end)));
        c = corrcoef(tV(spn:end),yV(nn,spn:end));
        corrV(nn,1)=c(1,2);
        E = tV(spn:end)- yV(nn,spn:end);
        SSE = sum(E.^2);
        u = mean(tV(spn:end));
        SSU = sum((tV(spn:end) - u).^2);
        nseV(nn,1) = 1 - SSE/SSU;
        f=yV(nn,spn:end);
        ref=tV(spn:end);
        resid(nn,:)=yV(nn,end-spnr:end)-tV(end-spnr:end);
        residS(nn,:)=resid(nn,:)/sqrt(sum(resid(nn,:).^2)/ (numel(resid(1,:))-1) );
        
        bias(nn,1) = mean(abs(f-ref)/ref);
         
        fp = f(ref>0.65*max(ref));
        refp = ref(ref>0.65*max(ref));
        biasp(nn,1) = mean(abs(fp-refp)/refp);
    end

aa=yV';
statsnnCal=[nse corr];
% [a BFImax]
statsnnVal=[nseV corrV rmseV  nrmseVavg bias]
nseVall(:,bb)=nseV;
corrVall(:,bb)=corrV;
rmseVall(:,bb)=rmseV;
nrmseVall(:,bb)=nrmseV;
maeVall(:,bb)=maeV;

obsVall(:,:,bb)=obsV(end-spnr:end,:);
yVall(:,:,bb)=yV(:,end-spnr:end);
daysVall(:,:,bb)=daysV(end-spnr:end,:);
residall(:,:,bb)=resid;
residSall(:,:,bb)=residS;

end
allstats=[nseVall;corrVall;nrmseVall;maeVall;rmseVall];


%% training testing streamflow Plots
obs_plV=obsV';
obs_pl=obs';
figure
for nl=1:3
    subplot(3,1,nl)
    nn=3*nl-2;
    hold on
    if nn==6
        nn=7;
    end
     plot(daysV(50:end)',obs_plV(nn,50:end),'k')
    plot(daysV(50:end)',yV(nn,50:end),'r--')

    title(['L' num2str(nn)])

    ylabel('Flow, cfs')
    xlim([min(daysV) max(daysV)])
%     ylim([0 12e4])
    datetick('x', 'dd mmm yy')
end
legend('Observed','ANN')
%%  Training plot
figure
for nl=1:3
    subplot(3,1,nl)
    nn=3*nl-2;
    hold on
    if nn==6
        nn=7;
    end 
    plot(days',y(nn,:),'k')
    plot(days',obs_pl(nn,:),'r')
    legend('NN Trained','Observed')
    title(['L' num2str(nn)])
    str = ['R^2=', num2str(corr(nn),'%.2g')];
    text(min(days),12e4,str);
%     ylim([0 15e4])
    ylabel('Flow, cfs')

    datetick('x', 'mmm yy')
end


%% training-testing metrics plot
figure
subplot(1,2,1)
hold on
plot([1:7], nrmseV, 'b-o')
% ylim([0 1])
xlabel('Lead, days')
title('NRMSE')
legend('NN Validated','GFS')
subplot(1,2,2)
hold on
% plot([1:7], nse, 'k-.')
plot([1:7], nseV, 'b-o')
% plot([1:7],nseGFS, 'r-o')
% plot([1:7],nseWRF, 'm-o')
% ylim([-0.2 1])
xlabel('Lead, days')
% legend('NN Validated', 'WRF','GFS')
title('NSE')


